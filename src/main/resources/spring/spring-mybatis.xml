<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
  http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
  http://www.springframework.org/schema/context  
  http://www.springframework.org/schema/context/spring-context-3.1.xsd  
  http://www.springframework.org/schema/mvc  
  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
  http://www.springframework.org/schema/aop 
  http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
  http://www.springframework.org/schema/tx 
  http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	
  <!-- context:component-scan base-package="com.unisafecap">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />        
    </context:component-scan -->
    
    <context:component-scan base-package="com.unisafecap.*" />

	<!-- 获取spring上下文 的util类 -->
	<bean id="springContextUtil" class="com.unisafecap.framework.common.utils.SpringContextUtil"/>
	
	<bean id="dataSource01" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url_01}" />
        <property name="username" value="${jdbc.username_01}" />
        <property name="password" value="${jdbc.password_01}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>
    
	<bean id="dataSource02" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url_02}" />
        <property name="username" value="${jdbc.username_02}" />
        <property name="password" value="${jdbc.password_02}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>
    
        <bean id="dynamicDataSource" class="com.unisafecap.framework.spring.support.DynamicDataSource" >  
            <property name="targetDataSources">  
                <map key-type="java.lang.String">  
                    <entry value-ref="dataSource01" key="dataSource02"></entry>  
                    <entry value-ref="dataSource02" key="dataSource02"></entry>  
                </map>  
            </property>  
            <property name="defaultTargetDataSource" ref="dataSource01"></property>  
        </bean>   
	
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<!--property name="configLocation" value="classpath:spring/mybatis-config.xml" /-->		
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:com/unisafecap/**/model/mapping/*.xml"></property>
		<!--property name="plugins">
	        <array>
	            <bean class="com.google.code.shardbatis.plugin.ShardPlugin">
	                <property name="properties">
	                    <value>
	                        shardingConfig=spring/shard_config.xml
	                    </value>
	                </property>
	            </bean>
	        </array>
    </property-->
		
	</bean>
	
	<!-- basedao使用 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate"/>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
	  <!-- set leval -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="check*" read-only="true" />
			<!-- other methods use the default transaction settings  -->					
			<tx:method name="*" rollback-for="Exception"/>	<!-- all exception rollback -->
    	</tx:attributes>
    </tx:advice>

	<!-- set class -->
	<aop:config>
	    <aop:pointcut id="managerOperation" expression="execution(* com.unisafecap.*.service.*Service.*(..)) or execution (* com.unisafecap.*.*.service.*Service.*(..))"/>
	    <aop:advisor pointcut-ref="managerOperation" advice-ref="txAdvice"/>
    </aop:config>
	
</beans>